
Debug/Labb2-3:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */ 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9e4 	bl	200003d0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#define B_SELECT 	0x4
#define B_RW 		0x2
#define B_RS 		0x1

// addessera ASCII-display och ettställ de bitar som är 1 i x
void ascii_ctrl_bit_set( unsigned char x ){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
2000001c:	4a0b      	ldr	r2, [pc, #44]	; (2000004c <ascii_ctrl_bit_set+0x3c>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x);
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2da      	uxtb	r2, r3
20000032:	0008      	movs	r0, r1
20000034:	187b      	adds	r3, r7, r1
20000036:	2104      	movs	r1, #4
20000038:	430a      	orrs	r2, r1
2000003a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000003c:	4a03      	ldr	r2, [pc, #12]	; (2000004c <ascii_ctrl_bit_set+0x3c>)
2000003e:	183b      	adds	r3, r7, r0
20000040:	781b      	ldrb	r3, [r3, #0]
20000042:	7013      	strb	r3, [r2, #0]
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b004      	add	sp, #16
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40021014 	andmi	r1, r2, r4, lsl r0

20000050 <ascii_ctrl_bit_clear>:
// addessera ASCII-display och nollställ de bitar som är 1 i x
void ascii_ctrl_bit_clear( unsigned char x ){
20000050:	b580      	push	{r7, lr}
20000052:	b084      	sub	sp, #16
20000054:	af00      	add	r7, sp, #0
20000056:	0002      	movs	r2, r0
20000058:	1dfb      	adds	r3, r7, #7
2000005a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
2000005c:	4a0d      	ldr	r2, [pc, #52]	; (20000094 <ascii_ctrl_bit_clear+0x44>)
2000005e:	210f      	movs	r1, #15
20000060:	187b      	adds	r3, r7, r1
20000062:	7812      	ldrb	r2, [r2, #0]
20000064:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000066:	1dfb      	adds	r3, r7, #7
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	b25b      	sxtb	r3, r3
2000006c:	43db      	mvns	r3, r3
2000006e:	b25b      	sxtb	r3, r3
20000070:	187a      	adds	r2, r7, r1
20000072:	7812      	ldrb	r2, [r2, #0]
20000074:	b252      	sxtb	r2, r2
20000076:	4013      	ands	r3, r2
20000078:	b25b      	sxtb	r3, r3
2000007a:	2204      	movs	r2, #4
2000007c:	4313      	orrs	r3, r2
2000007e:	b25a      	sxtb	r2, r3
20000080:	187b      	adds	r3, r7, r1
20000082:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000084:	4a03      	ldr	r2, [pc, #12]	; (20000094 <ascii_ctrl_bit_clear+0x44>)
20000086:	187b      	adds	r3, r7, r1
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	7013      	strb	r3, [r2, #0]
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46bd      	mov	sp, r7
20000090:	b004      	add	sp, #16
20000092:	bd80      	pop	{r7, pc}
20000094:	40021014 	andmi	r1, r2, r4, lsl r0

20000098 <ascii_write_controller>:

// Funktion för att skriva till displayen
void ascii_write_controller( unsigned char byte ){
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
	//Delay 40 ns
	ascii_ctrl_bit_set(B_E);
200000a4:	2040      	movs	r0, #64	; 0x40
200000a6:	f7ff ffb3 	bl	20000010 <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
200000aa:	4a06      	ldr	r2, [pc, #24]	; (200000c4 <ascii_write_controller+0x2c>)
200000ac:	1dfb      	adds	r3, r7, #7
200000ae:	781b      	ldrb	r3, [r3, #0]
200000b0:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200000b2:	f000 f88b 	bl	200001cc <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200000b6:	2040      	movs	r0, #64	; 0x40
200000b8:	f7ff ffca 	bl	20000050 <ascii_ctrl_bit_clear>
	//Delay 10 ns
}
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46bd      	mov	sp, r7
200000c0:	b002      	add	sp, #8
200000c2:	bd80      	pop	{r7, pc}
200000c4:	40021015 	andmi	r1, r2, r5, lsl r0

200000c8 <ascii_write_cmd>:

// Skriv ett kommando till displayen
void ascii_write_cmd( unsigned char command ){
200000c8:	b580      	push	{r7, lr}
200000ca:	b082      	sub	sp, #8
200000cc:	af00      	add	r7, sp, #0
200000ce:	0002      	movs	r2, r0
200000d0:	1dfb      	adds	r3, r7, #7
200000d2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
200000d4:	2001      	movs	r0, #1
200000d6:	f7ff ffbb 	bl	20000050 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear( B_RW );
200000da:	2002      	movs	r0, #2
200000dc:	f7ff ffb8 	bl	20000050 <ascii_ctrl_bit_clear>
	ascii_write_controller( command );
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	0018      	movs	r0, r3
200000e6:	f7ff ffd7 	bl	20000098 <ascii_write_controller>
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46bd      	mov	sp, r7
200000ee:	b002      	add	sp, #8
200000f0:	bd80      	pop	{r7, pc}

200000f2 <ascii_write_data>:

// Skriv data till displayen
void ascii_write_data( data ){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	6078      	str	r0, [r7, #4]
	ascii_ctrl_bit_set( B_RS );
200000fa:	2001      	movs	r0, #1
200000fc:	f7ff ff88 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RW );
20000100:	2002      	movs	r0, #2
20000102:	f7ff ffa5 	bl	20000050 <ascii_ctrl_bit_clear>
	ascii_write_controller( data );
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	b2db      	uxtb	r3, r3
2000010a:	0018      	movs	r0, r3
2000010c:	f7ff ffc4 	bl	20000098 <ascii_write_controller>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b002      	add	sp, #8
20000116:	bd80      	pop	{r7, pc}

20000118 <ascii_read_controller>:

// Läs från displayen
unsigned char ascii_read_controller( void ){
20000118:	b580      	push	{r7, lr}
2000011a:	b082      	sub	sp, #8
2000011c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set( B_E );
2000011e:	2040      	movs	r0, #64	; 0x40
20000120:	f7ff ff76 	bl	20000010 <ascii_ctrl_bit_set>
	delay_250ns();
20000124:	f000 f852 	bl	200001cc <delay_250ns>
	delay_250ns();
20000128:	f000 f850 	bl	200001cc <delay_250ns>
	c = *portIdrHigh;
2000012c:	4a06      	ldr	r2, [pc, #24]	; (20000148 <ascii_read_controller+0x30>)
2000012e:	1dfb      	adds	r3, r7, #7
20000130:	7812      	ldrb	r2, [r2, #0]
20000132:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
20000134:	2040      	movs	r0, #64	; 0x40
20000136:	f7ff ff8b 	bl	20000050 <ascii_ctrl_bit_clear>
	return c;
2000013a:	1dfb      	adds	r3, r7, #7
2000013c:	781b      	ldrb	r3, [r3, #0]
}
2000013e:	0018      	movs	r0, r3
20000140:	46bd      	mov	sp, r7
20000142:	b002      	add	sp, #8
20000144:	bd80      	pop	{r7, pc}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	40021011 	andmi	r1, r2, r1, lsl r0

2000014c <ascii_read_status>:

// Läs statusbit från displayen (ger 0x80 om man inte kan skriva och 0 om man kan skriva)
unsigned char ascii_read_status( void ){
2000014c:	b590      	push	{r4, r7, lr}
2000014e:	b083      	sub	sp, #12
20000150:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
20000152:	4b0b      	ldr	r3, [pc, #44]	; (20000180 <ascii_read_status+0x34>)
20000154:	4a0b      	ldr	r2, [pc, #44]	; (20000184 <ascii_read_status+0x38>)
20000156:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
20000158:	2001      	movs	r0, #1
2000015a:	f7ff ff79 	bl	20000050 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set( B_RW );
2000015e:	2002      	movs	r0, #2
20000160:	f7ff ff56 	bl	20000010 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000164:	1dfc      	adds	r4, r7, #7
20000166:	f7ff ffd7 	bl	20000118 <ascii_read_controller>
2000016a:	0003      	movs	r3, r0
2000016c:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
2000016e:	4b04      	ldr	r3, [pc, #16]	; (20000180 <ascii_read_status+0x34>)
20000170:	4a05      	ldr	r2, [pc, #20]	; (20000188 <ascii_read_status+0x3c>)
20000172:	601a      	str	r2, [r3, #0]
	return rv;
20000174:	1dfb      	adds	r3, r7, #7
20000176:	781b      	ldrb	r3, [r3, #0]
}
20000178:	0018      	movs	r0, r3
2000017a:	46bd      	mov	sp, r7
2000017c:	b003      	add	sp, #12
2000017e:	bd90      	pop	{r4, r7, pc}
20000180:	40021000 	andmi	r1, r2, r0
20000184:	00005555 	andeq	r5, r0, r5, asr r5
20000188:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000018c <ascii_read_data>:

// Läsa data från displayen
unsigned char ascii_read_data( void ){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_data+0x34>)
20000194:	4a0b      	ldr	r2, [pc, #44]	; (200001c4 <ascii_read_data+0x38>)
20000196:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RS );
20000198:	2001      	movs	r0, #1
2000019a:	f7ff ff39 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set( B_RW );
2000019e:	2002      	movs	r0, #2
200001a0:	f7ff ff36 	bl	20000010 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffb7 	bl	20000118 <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_data+0x34>)
200001b0:	4a05      	ldr	r2, [pc, #20]	; (200001c8 <ascii_read_data+0x3c>)
200001b2:	601a      	str	r2, [r3, #0]
	return rv;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021000 	andmi	r1, r2, r0
200001c4:	00005555 	andeq	r5, r0, r5, asr r5
200001c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001cc <delay_250ns>:

// Fördröjningsrutin
void delay_250ns( void ){
200001cc:	b580      	push	{r7, lr}
200001ce:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
200001d0:	4b09      	ldr	r3, [pc, #36]	; (200001f8 <delay_250ns+0x2c>)
200001d2:	2200      	movs	r2, #0
200001d4:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/4) -1 );
200001d6:	4b09      	ldr	r3, [pc, #36]	; (200001fc <delay_250ns+0x30>)
200001d8:	2229      	movs	r2, #41	; 0x29
200001da:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
200001dc:	4b08      	ldr	r3, [pc, #32]	; (20000200 <delay_250ns+0x34>)
200001de:	2200      	movs	r2, #0
200001e0:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
200001e2:	4b05      	ldr	r3, [pc, #20]	; (200001f8 <delay_250ns+0x2c>)
200001e4:	2205      	movs	r2, #5
200001e6:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
200001e8:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
200001ea:	4b03      	ldr	r3, [pc, #12]	; (200001f8 <delay_250ns+0x2c>)
200001ec:	2200      	movs	r2, #0
200001ee:	601a      	str	r2, [r3, #0]
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	bd80      	pop	{r7, pc}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	e000e010 	and	lr, r0, r0, lsl r0
200001fc:	e000e014 	and	lr, r0, r4, lsl r0
20000200:	e000e018 	and	lr, r0, r8, lsl r0

20000204 <delay_mikro>:

// Fördröj en mikro sekund
void delay_mikro(unsigned int us){
20000204:	b580      	push	{r7, lr}
20000206:	b084      	sub	sp, #16
20000208:	af00      	add	r7, sp, #0
2000020a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < us; i++){
2000020c:	2300      	movs	r3, #0
2000020e:	60fb      	str	r3, [r7, #12]
20000210:	e00d      	b.n	2000022e <delay_mikro+0x2a>
		for(int j = 0; j < 4; j++){
20000212:	2300      	movs	r3, #0
20000214:	60bb      	str	r3, [r7, #8]
20000216:	e004      	b.n	20000222 <delay_mikro+0x1e>
			delay_250ns();
20000218:	f7ff ffd8 	bl	200001cc <delay_250ns>
		for(int j = 0; j < 4; j++){
2000021c:	68bb      	ldr	r3, [r7, #8]
2000021e:	3301      	adds	r3, #1
20000220:	60bb      	str	r3, [r7, #8]
20000222:	68bb      	ldr	r3, [r7, #8]
20000224:	2b03      	cmp	r3, #3
20000226:	ddf7      	ble.n	20000218 <delay_mikro+0x14>
	for(int i = 0; i < us; i++){
20000228:	68fb      	ldr	r3, [r7, #12]
2000022a:	3301      	adds	r3, #1
2000022c:	60fb      	str	r3, [r7, #12]
2000022e:	68fb      	ldr	r3, [r7, #12]
20000230:	687a      	ldr	r2, [r7, #4]
20000232:	429a      	cmp	r2, r3
20000234:	d8ed      	bhi.n	20000212 <delay_mikro+0xe>
		}
	}
}
20000236:	46c0      	nop			; (mov r8, r8)
20000238:	46c0      	nop			; (mov r8, r8)
2000023a:	46bd      	mov	sp, r7
2000023c:	b004      	add	sp, #16
2000023e:	bd80      	pop	{r7, pc}

20000240 <delay_milli>:

// Fördröj en milli sekund
void delay_milli(unsigned int ms){
20000240:	b580      	push	{r7, lr}
20000242:	b084      	sub	sp, #16
20000244:	af00      	add	r7, sp, #0
20000246:	6078      	str	r0, [r7, #4]
	int i;
	while( ms-- ){
20000248:	e012      	b.n	20000270 <delay_milli+0x30>
		for( i = 0; i < 1000; i++){
2000024a:	2300      	movs	r3, #0
2000024c:	60fb      	str	r3, [r7, #12]
2000024e:	e00a      	b.n	20000266 <delay_milli+0x26>
			delay_250ns();
20000250:	f7ff ffbc 	bl	200001cc <delay_250ns>
			delay_250ns();
20000254:	f7ff ffba 	bl	200001cc <delay_250ns>
			delay_250ns();
20000258:	f7ff ffb8 	bl	200001cc <delay_250ns>
			delay_250ns();
2000025c:	f7ff ffb6 	bl	200001cc <delay_250ns>
		for( i = 0; i < 1000; i++){
20000260:	68fb      	ldr	r3, [r7, #12]
20000262:	3301      	adds	r3, #1
20000264:	60fb      	str	r3, [r7, #12]
20000266:	68fa      	ldr	r2, [r7, #12]
20000268:	23fa      	movs	r3, #250	; 0xfa
2000026a:	009b      	lsls	r3, r3, #2
2000026c:	429a      	cmp	r2, r3
2000026e:	dbef      	blt.n	20000250 <delay_milli+0x10>
	while( ms-- ){
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	1e5a      	subs	r2, r3, #1
20000274:	607a      	str	r2, [r7, #4]
20000276:	2b00      	cmp	r3, #0
20000278:	d1e7      	bne.n	2000024a <delay_milli+0xa>
		}
	}
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46c0      	nop			; (mov r8, r8)
2000027e:	46bd      	mov	sp, r7
20000280:	b004      	add	sp, #16
20000282:	bd80      	pop	{r7, pc}

20000284 <ascii_init>:

// Initiera ascii-display så att man kan skriva och läsa data ifrån den
void ascii_init( void ){
20000284:	b580      	push	{r7, lr}
20000286:	af00      	add	r7, sp, #0
	//Function set
	while( (ascii_read_status() & 0x80) == 0x80){}
20000288:	46c0      	nop			; (mov r8, r8)
2000028a:	f7ff ff5f 	bl	2000014c <ascii_read_status>
2000028e:	0003      	movs	r3, r0
20000290:	001a      	movs	r2, r3
20000292:	2380      	movs	r3, #128	; 0x80
20000294:	4013      	ands	r3, r2
20000296:	2b80      	cmp	r3, #128	; 0x80
20000298:	d0f7      	beq.n	2000028a <ascii_init+0x6>
	delay_mikro( 8 );
2000029a:	2008      	movs	r0, #8
2000029c:	f7ff ffb2 	bl	20000204 <delay_mikro>
	ascii_write_cmd( 0b111000 );
200002a0:	2038      	movs	r0, #56	; 0x38
200002a2:	f7ff ff11 	bl	200000c8 <ascii_write_cmd>
	delay_mikro( 39 );
200002a6:	2027      	movs	r0, #39	; 0x27
200002a8:	f7ff ffac 	bl	20000204 <delay_mikro>
	//Display control
	while( (ascii_read_status() & 0x80) == 0x80){}
200002ac:	46c0      	nop			; (mov r8, r8)
200002ae:	f7ff ff4d 	bl	2000014c <ascii_read_status>
200002b2:	0003      	movs	r3, r0
200002b4:	001a      	movs	r2, r3
200002b6:	2380      	movs	r3, #128	; 0x80
200002b8:	4013      	ands	r3, r2
200002ba:	2b80      	cmp	r3, #128	; 0x80
200002bc:	d0f7      	beq.n	200002ae <ascii_init+0x2a>
	delay_mikro( 8 );
200002be:	2008      	movs	r0, #8
200002c0:	f7ff ffa0 	bl	20000204 <delay_mikro>
	ascii_write_cmd( 0b1110 );
200002c4:	200e      	movs	r0, #14
200002c6:	f7ff feff 	bl	200000c8 <ascii_write_cmd>
	delay_mikro( 39 );
200002ca:	2027      	movs	r0, #39	; 0x27
200002cc:	f7ff ff9a 	bl	20000204 <delay_mikro>
	//Clear Display
	while( (ascii_read_status() & 0x80) == 0x80){}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	f7ff ff3b 	bl	2000014c <ascii_read_status>
200002d6:	0003      	movs	r3, r0
200002d8:	001a      	movs	r2, r3
200002da:	2380      	movs	r3, #128	; 0x80
200002dc:	4013      	ands	r3, r2
200002de:	2b80      	cmp	r3, #128	; 0x80
200002e0:	d0f7      	beq.n	200002d2 <ascii_init+0x4e>
	delay_mikro( 8 );
200002e2:	2008      	movs	r0, #8
200002e4:	f7ff ff8e 	bl	20000204 <delay_mikro>
	ascii_write_cmd( 0b1 );
200002e8:	2001      	movs	r0, #1
200002ea:	f7ff feed 	bl	200000c8 <ascii_write_cmd>
	delay_milli( 2 );
200002ee:	2002      	movs	r0, #2
200002f0:	f7ff ffa6 	bl	20000240 <delay_milli>
	//Entry mode set
	while( (ascii_read_status() & 0x80) == 0x80){}
200002f4:	46c0      	nop			; (mov r8, r8)
200002f6:	f7ff ff29 	bl	2000014c <ascii_read_status>
200002fa:	0003      	movs	r3, r0
200002fc:	001a      	movs	r2, r3
200002fe:	2380      	movs	r3, #128	; 0x80
20000300:	4013      	ands	r3, r2
20000302:	2b80      	cmp	r3, #128	; 0x80
20000304:	d0f7      	beq.n	200002f6 <ascii_init+0x72>
	delay_mikro( 8 );
20000306:	2008      	movs	r0, #8
20000308:	f7ff ff7c 	bl	20000204 <delay_mikro>
	ascii_write_cmd( 0b110 );
2000030c:	2006      	movs	r0, #6
2000030e:	f7ff fedb 	bl	200000c8 <ascii_write_cmd>
	delay_mikro( 39 );
20000312:	2027      	movs	r0, #39	; 0x27
20000314:	f7ff ff76 	bl	20000204 <delay_mikro>
}
20000318:	46c0      	nop			; (mov r8, r8)
2000031a:	46bd      	mov	sp, r7
2000031c:	bd80      	pop	{r7, pc}

2000031e <ascii_gotoxy>:

// Gå till angiven rad och kolumn hos ascii-displayen
void ascii_gotoxy( int x, int y ){
2000031e:	b580      	push	{r7, lr}
20000320:	b084      	sub	sp, #16
20000322:	af00      	add	r7, sp, #0
20000324:	6078      	str	r0, [r7, #4]
20000326:	6039      	str	r1, [r7, #0]
	int address = x-1;
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	3b01      	subs	r3, #1
2000032c:	60fb      	str	r3, [r7, #12]
	if( y == 2 ){
2000032e:	683b      	ldr	r3, [r7, #0]
20000330:	2b02      	cmp	r3, #2
20000332:	d102      	bne.n	2000033a <ascii_gotoxy+0x1c>
		address = address + 0x40;
20000334:	68fb      	ldr	r3, [r7, #12]
20000336:	3340      	adds	r3, #64	; 0x40
20000338:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd( 0x80 | address );
2000033a:	68fb      	ldr	r3, [r7, #12]
2000033c:	b25b      	sxtb	r3, r3
2000033e:	2280      	movs	r2, #128	; 0x80
20000340:	4252      	negs	r2, r2
20000342:	4313      	orrs	r3, r2
20000344:	b25b      	sxtb	r3, r3
20000346:	b2db      	uxtb	r3, r3
20000348:	0018      	movs	r0, r3
2000034a:	f7ff febd 	bl	200000c8 <ascii_write_cmd>
	delay_mikro( 43 );
2000034e:	202b      	movs	r0, #43	; 0x2b
20000350:	f7ff ff58 	bl	20000204 <delay_mikro>
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	b004      	add	sp, #16
2000035a:	bd80      	pop	{r7, pc}

2000035c <ascii_write_char>:

// Rutin för att skriva data till ASCII-diplayen
void ascii_write_char( unsigned char c ){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
	while ( (ascii_read_status() & 0x80) == 0x80 ){}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	f7ff feef 	bl	2000014c <ascii_read_status>
2000036e:	0003      	movs	r3, r0
20000370:	001a      	movs	r2, r3
20000372:	2380      	movs	r3, #128	; 0x80
20000374:	4013      	ands	r3, r2
20000376:	2b80      	cmp	r3, #128	; 0x80
20000378:	d0f7      	beq.n	2000036a <ascii_write_char+0xe>
	delay_mikro( 8 );
2000037a:	2008      	movs	r0, #8
2000037c:	f7ff ff42 	bl	20000204 <delay_mikro>
	ascii_write_data( c );
20000380:	1dfb      	adds	r3, r7, #7
20000382:	781b      	ldrb	r3, [r3, #0]
20000384:	0018      	movs	r0, r3
20000386:	f7ff feb4 	bl	200000f2 <ascii_write_data>
	delay_mikro( 43 );
2000038a:	202b      	movs	r0, #43	; 0x2b
2000038c:	f7ff ff3a 	bl	20000204 <delay_mikro>
}
20000390:	46c0      	nop			; (mov r8, r8)
20000392:	46bd      	mov	sp, r7
20000394:	b002      	add	sp, #8
20000396:	bd80      	pop	{r7, pc}

20000398 <init_app>:

// Initera port 15E-8E och 7E-0E som utportar
void init_app(){
20000398:	b580      	push	{r7, lr}
2000039a:	af00      	add	r7, sp, #0
	// starta klockor port D och E 
	*((unsigned long *) 0x40023830) = 0x18;
2000039c:	4b07      	ldr	r3, [pc, #28]	; (200003bc <init_app+0x24>)
2000039e:	2218      	movs	r2, #24
200003a0:	601a      	str	r2, [r3, #0]
	*portModer   = 0x55555555;
200003a2:	4b07      	ldr	r3, [pc, #28]	; (200003c0 <init_app+0x28>)
200003a4:	4a07      	ldr	r2, [pc, #28]	; (200003c4 <init_app+0x2c>)
200003a6:	601a      	str	r2, [r3, #0]
	*portOtyper  = 0x0000;
200003a8:	4b07      	ldr	r3, [pc, #28]	; (200003c8 <init_app+0x30>)
200003aa:	2200      	movs	r2, #0
200003ac:	801a      	strh	r2, [r3, #0]
	*portOspeedr = 0x55555555;
200003ae:	4b07      	ldr	r3, [pc, #28]	; (200003cc <init_app+0x34>)
200003b0:	4a04      	ldr	r2, [pc, #16]	; (200003c4 <init_app+0x2c>)
200003b2:	601a      	str	r2, [r3, #0]
}
200003b4:	46c0      	nop			; (mov r8, r8)
200003b6:	46bd      	mov	sp, r7
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023830 	andmi	r3, r2, r0, lsr r8
200003c0:	40021000 	andmi	r1, r2, r0
200003c4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200003c8:	40021004 	andmi	r1, r2, r4
200003cc:	40021008 	andmi	r1, r2, r8

200003d0 <main>:

// Testa ascii displayen
int main(int argc, char **argv){
200003d0:	b590      	push	{r4, r7, lr}
200003d2:	b089      	sub	sp, #36	; 0x24
200003d4:	af00      	add	r7, sp, #0
200003d6:	6078      	str	r0, [r7, #4]
200003d8:	6039      	str	r1, [r7, #0]
	char *s;
	char test1[] = "Hello";
200003da:	2414      	movs	r4, #20
200003dc:	193b      	adds	r3, r7, r4
200003de:	4a1d      	ldr	r2, [pc, #116]	; (20000454 <main+0x84>)
200003e0:	6811      	ldr	r1, [r2, #0]
200003e2:	6019      	str	r1, [r3, #0]
200003e4:	8892      	ldrh	r2, [r2, #4]
200003e6:	809a      	strh	r2, [r3, #4]
	char test2[] = "World";
200003e8:	230c      	movs	r3, #12
200003ea:	18fb      	adds	r3, r7, r3
200003ec:	4a1a      	ldr	r2, [pc, #104]	; (20000458 <main+0x88>)
200003ee:	6811      	ldr	r1, [r2, #0]
200003f0:	6019      	str	r1, [r3, #0]
200003f2:	8892      	ldrh	r2, [r2, #4]
200003f4:	809a      	strh	r2, [r3, #4]
	
	init_app();
200003f6:	f7ff ffcf 	bl	20000398 <init_app>
	ascii_init();
200003fa:	f7ff ff43 	bl	20000284 <ascii_init>
	ascii_gotoxy(1,1);
200003fe:	2101      	movs	r1, #1
20000400:	2001      	movs	r0, #1
20000402:	f7ff ff8c 	bl	2000031e <ascii_gotoxy>
	s = test1;
20000406:	193b      	adds	r3, r7, r4
20000408:	61fb      	str	r3, [r7, #28]
	while( *s )
2000040a:	e006      	b.n	2000041a <main+0x4a>
		ascii_write_char( *s++ );
2000040c:	69fb      	ldr	r3, [r7, #28]
2000040e:	1c5a      	adds	r2, r3, #1
20000410:	61fa      	str	r2, [r7, #28]
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	0018      	movs	r0, r3
20000416:	f7ff ffa1 	bl	2000035c <ascii_write_char>
	while( *s )
2000041a:	69fb      	ldr	r3, [r7, #28]
2000041c:	781b      	ldrb	r3, [r3, #0]
2000041e:	2b00      	cmp	r3, #0
20000420:	d1f4      	bne.n	2000040c <main+0x3c>
	ascii_gotoxy(1,2);
20000422:	2102      	movs	r1, #2
20000424:	2001      	movs	r0, #1
20000426:	f7ff ff7a 	bl	2000031e <ascii_gotoxy>
	s = test2;
2000042a:	230c      	movs	r3, #12
2000042c:	18fb      	adds	r3, r7, r3
2000042e:	61fb      	str	r3, [r7, #28]
	while( *s )
20000430:	e006      	b.n	20000440 <main+0x70>
		ascii_write_char( *s++ );
20000432:	69fb      	ldr	r3, [r7, #28]
20000434:	1c5a      	adds	r2, r3, #1
20000436:	61fa      	str	r2, [r7, #28]
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	0018      	movs	r0, r3
2000043c:	f7ff ff8e 	bl	2000035c <ascii_write_char>
	while( *s )
20000440:	69fb      	ldr	r3, [r7, #28]
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2b00      	cmp	r3, #0
20000446:	d1f4      	bne.n	20000432 <main+0x62>
	return 0;
20000448:	2300      	movs	r3, #0
}
2000044a:	0018      	movs	r0, r3
2000044c:	46bd      	mov	sp, r7
2000044e:	b009      	add	sp, #36	; 0x24
20000450:	bd90      	pop	{r4, r7, pc}
20000452:	46c0      	nop			; (mov r8, r8)
20000454:	2000045c 	andcs	r0, r0, ip, asr r4
20000458:	20000464 	andcs	r0, r0, r4, ror #8
2000045c:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
20000460:	0000006f 	andeq	r0, r0, pc, rrx
20000464:	6c726f57 	ldclvs	15, cr6, [r2], #-348	; 0xfffffea4
20000468:	00000064 	andeq	r0, r0, r4, rrx

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000359 	andeq	r0, r0, r9, asr r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000005e 	andeq	r0, r0, lr, asr r0
  10:	00014a0c 	andeq	r4, r1, ip, lsl #20
  14:	00023700 	andeq	r3, r2, r0, lsl #14
	...
  24:	01450200 	mrseq	r0, (UNDEF: 101)
  28:	bb010000 	bllt	40030 <startup-0x1ffbffd0>
  2c:	00008905 	andeq	r8, r0, r5, lsl #18
  30:	0003d000 	andeq	sp, r3, r0
  34:	00008c20 	andeq	r8, r0, r0, lsr #24
  38:	899c0100 	ldmibhi	ip, {r8}
  3c:	03000000 	movweq	r0, #0
  40:	000001ea 	andeq	r0, r0, sl, ror #3
  44:	890ebb01 	stmdbhi	lr, {r0, r8, r9, fp, ip, sp, pc}
  48:	02000000 	andeq	r0, r0, #0
  4c:	b7035491 			; <UNDEFINED> instruction: 0xb7035491
  50:	01000002 	tsteq	r0, r2
  54:	00901bbb 			; <UNDEFINED> instruction: 0x00901bbb
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	00730450 	rsbseq	r0, r3, r0, asr r4
  60:	9608bc01 	strls	fp, [r8], -r1, lsl #24
  64:	02000000 	andeq	r0, r0, #0
  68:	ef056c91 	svc	0x00056c91
  6c:	01000001 	tsteq	r0, r1
  70:	00a307bd 	strhteq	r0, [r3], sp
  74:	91020000 	mrsls	r0, (UNDEF: 2)
  78:	01f50564 	mvnseq	r0, r4, ror #10
  7c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
  80:	0000a307 	andeq	sl, r0, r7, lsl #6
  84:	5c910200 	lfmpl	f0, 4, [r1], {0}
  88:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
  8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  90:	00960407 	addseq	r0, r6, r7, lsl #8
  94:	04070000 	streq	r0, [r7], #-0
  98:	0000009c 	muleq	r0, ip, r0
  9c:	40080108 	andmi	r0, r8, r8, lsl #2
  a0:	09000001 	stmdbeq	r0, {r0}
  a4:	0000009c 	muleq	r0, ip, r0
  a8:	000000b3 	strheq	r0, [r0], -r3
  ac:	0000b30a 	andeq	fp, r0, sl, lsl #6
  b0:	08000500 	stmdaeq	r0, {r8, sl}
  b4:	00190704 	andseq	r0, r9, r4, lsl #14
  b8:	d40b0000 	strle	r0, [fp], #-0
  bc:	01000001 	tsteq	r0, r1
  c0:	039806b2 	orrseq	r0, r8, #186646528	; 0xb200000
  c4:	00382000 	eorseq	r2, r8, r0
  c8:	9c010000 	stcls	0, cr0, [r1], {-0}
  cc:	0002130c 	andeq	r1, r2, ip, lsl #6
  d0:	06aa0100 	strteq	r0, [sl], r0, lsl #2
  d4:	2000035c 	andcs	r0, r0, ip, asr r3
  d8:	0000003c 	andeq	r0, r0, ip, lsr r0
  dc:	00f09c01 	rscseq	r9, r0, r1, lsl #24
  e0:	630d0000 	movwvs	r0, #53248	; 0xd000
  e4:	26aa0100 	strtcs	r0, [sl], r0, lsl #2
  e8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
  f0:	37080108 	strcc	r0, [r8, -r8, lsl #2]
  f4:	0c000001 	stceq	0, cr0, [r0], {1}
  f8:	0000000c 	andeq	r0, r0, ip
  fc:	1e06a001 	cdpne	0, 0, cr10, cr6, cr1, {0}
 100:	3e200003 	cdpcc	0, 2, cr0, cr0, cr3, {0}
 104:	01000000 	mrseq	r0, (UNDEF: 0)
 108:	0001379c 	muleq	r1, ip, r7
 10c:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 110:	8918a001 	ldmdbhi	r8, {r0, sp, pc}
 114:	02000000 	andeq	r0, r0, #0
 118:	790d6c91 	stmdbvc	sp, {r0, r4, r7, sl, fp, sp, lr}
 11c:	1fa00100 	svcne	0x00a00100
 120:	00000089 	andeq	r0, r0, r9, lsl #1
 124:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
 128:	00000119 	andeq	r0, r0, r9, lsl r1
 12c:	8906a101 	stmdbhi	r6, {r0, r8, sp, pc}
 130:	02000000 	andeq	r0, r0, #0
 134:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
 138:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 13c:	84068801 	strhi	r8, [r6], #-2049	; 0xfffff7ff
 140:	9a200002 	bls	800150 <startup-0x1f7ffeb0>
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	00000c9c 	muleq	r0, ip, ip
 14c:	7b010000 	blvc	40154 <startup-0x1ffbfeac>
 150:	00024006 	andeq	r4, r2, r6
 154:	00004420 	andeq	r4, r0, r0, lsr #8
 158:	7b9c0100 	blvc	fe700560 <main+0xde700190>
 15c:	0d000001 	stceq	0, cr0, [r0, #-4]
 160:	0100736d 	tsteq	r0, sp, ror #6
 164:	00b31f7b 	adcseq	r1, r3, fp, ror pc
 168:	91020000 	mrsls	r0, (UNDEF: 2)
 16c:	0069046c 	rsbeq	r0, r9, ip, ror #8
 170:	89067c01 	stmdbhi	r6, {r0, sl, fp, ip, sp, lr}
 174:	02000000 	andeq	r0, r0, #0
 178:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
 17c:	0000003b 	andeq	r0, r0, fp, lsr r0
 180:	04067201 	streq	r7, [r6], #-513	; 0xfffffdff
 184:	3c200002 	stccc	0, cr0, [r0], #-8
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	0001ce9c 	muleq	r1, ip, lr
 190:	73750d00 	cmnvc	r5, #0, 26
 194:	1f720100 	svcne	0x00720100
 198:	000000b3 	strheq	r0, [r0], -r3
 19c:	0f6c9102 	svceq	0x006c9102
 1a0:	2000020c 	andcs	r0, r0, ip, lsl #4
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	01006904 	tsteq	r0, r4, lsl #18
 1ac:	00890a73 	addeq	r0, r9, r3, ror sl
 1b0:	91020000 	mrsls	r0, (UNDEF: 2)
 1b4:	02120f74 	andseq	r0, r2, #116, 30	; 0x1d0
 1b8:	00162000 	andseq	r2, r6, r0
 1bc:	6a040000 	bvs	1001c4 <startup-0x1feffe3c>
 1c0:	0b740100 	bleq	1d005c8 <startup-0x1e2ffa38>
 1c4:	00000089 	andeq	r0, r0, r9, lsl #1
 1c8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 1cc:	fd100000 	ldc2	0, cr0, [r0, #-0]
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	01cc0668 	biceq	r0, ip, r8, ror #12
 1d8:	00382000 	eorseq	r2, r8, r0
 1dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 1e0:	00020302 	andeq	r0, r2, r2, lsl #6
 1e4:	0f5e0100 	svceq	0x005e0100
 1e8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1ec:	2000018c 	andcs	r0, r0, ip, lsl #3
 1f0:	00000040 	andeq	r0, r0, r0, asr #32
 1f4:	02099c01 	andeq	r9, r9, #256	; 0x100
 1f8:	72040000 	andvc	r0, r4, #0
 1fc:	62010076 	andvs	r0, r1, #118	; 0x76
 200:	0000f010 	andeq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
 204:	6f910200 	svcvs	0x00910200
 208:	00da0200 	sbcseq	r0, sl, r0, lsl #4
 20c:	54010000 	strpl	r0, [r1], #-0
 210:	0000f00f 	andeq	pc, r0, pc
 214:	00014c00 	andeq	r4, r1, r0, lsl #24
 218:	00004020 	andeq	r4, r0, r0, lsr #32
 21c:	329c0100 	addscc	r0, ip, #0, 2
 220:	04000002 	streq	r0, [r0], #-2
 224:	01007672 	tsteq	r0, r2, ror r6
 228:	00f01058 	rscseq	r1, r0, r8, asr r0
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	2102006f 	tstcs	r2, pc, rrx
 234:	01000001 	tsteq	r0, r1
 238:	00f00f49 	rscseq	r0, r0, r9, asr #30
 23c:	01180000 	tsteq	r8, r0
 240:	00342000 	eorseq	r2, r4, r0
 244:	9c010000 	stcls	0, cr0, [r1], {-0}
 248:	00000268 	andeq	r0, r0, r8, ror #4
 24c:	01006304 	tsteq	r0, r4, lsl #6
 250:	00f0104a 	rscseq	r1, r0, sl, asr #32
 254:	91020000 	mrsls	r0, (UNDEF: 2)
 258:	00fd1177 	rscseq	r1, sp, r7, ror r1
 25c:	35010000 	strcc	r0, [r1, #-0]
 260:	00008902 	andeq	r8, r0, r2, lsl #18
 264:	00001200 	andeq	r1, r0, r0, lsl #4
 268:	0000ec13 	andeq	lr, r0, r3, lsl ip
 26c:	06420100 	strbeq	r0, [r2], -r0, lsl #2
 270:	200000f2 	strdcs	r0, [r0], -r2
 274:	00000026 	andeq	r0, r0, r6, lsr #32
 278:	028e9c01 	addeq	r9, lr, #256	; 0x100
 27c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
 280:	01000002 	tsteq	r0, r2
 284:	00890642 	addeq	r0, r9, r2, asr #12
 288:	91020000 	mrsls	r0, (UNDEF: 2)
 28c:	090c0074 	stmdbeq	ip, {r2, r4, r5, r6}
 290:	01000001 	tsteq	r0, r1
 294:	00c8063b 	sbceq	r0, r8, fp, lsr r6
 298:	002a2000 	eoreq	r2, sl, r0
 29c:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 2a4:	0001dd03 	andeq	sp, r1, r3, lsl #26
 2a8:	253b0100 	ldrcs	r0, [fp, #-256]!	; 0xffffff00
 2ac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2b0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2b4:	0000470c 	andeq	r4, r0, ip, lsl #14
 2b8:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
 2bc:	20000098 	mulcs	r0, r8, r0
 2c0:	00000030 	andeq	r0, r0, r0, lsr r0
 2c4:	02e89c01 	rsceq	r9, r8, #256	; 0x100
 2c8:	e5030000 	str	r0, [r3, #-0]
 2cc:	01000001 	tsteq	r0, r1
 2d0:	00f02c31 	rscseq	r2, r0, r1, lsr ip
 2d4:	91020000 	mrsls	r0, (UNDEF: 2)
 2d8:	00fd1177 	rscseq	r1, sp, r7, ror r1
 2dc:	35010000 	strcc	r0, [r1, #-0]
 2e0:	00008902 	andeq	r8, r0, r2, lsl #18
 2e4:	00001200 	andeq	r1, r0, r0, lsl #4
 2e8:	00002614 	andeq	r2, r0, r4, lsl r6
 2ec:	06290100 	strteq	r0, [r9], -r0, lsl #2
 2f0:	20000050 	andcs	r0, r0, r0, asr r0
 2f4:	00000048 	andeq	r0, r0, r8, asr #32
 2f8:	03199c01 	tsteq	r9, #256	; 0x100
 2fc:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
 300:	2a290100 	bcs	a40708 <startup-0x1f5bf8f8>
 304:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	046f9102 	strbteq	r9, [pc], #-258	; 310 <startup-0x1ffffcf0>
 30c:	2a010063 	bcs	404a0 <startup-0x1ffbfb60>
 310:	0000f010 	andeq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
 314:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 318:	02241400 	eoreq	r1, r4, #0, 8
 31c:	22010000 	andcs	r0, r1, #0
 320:	00001006 	andeq	r1, r0, r6
 324:	00004020 	andeq	r4, r0, r0, lsr #32
 328:	4a9c0100 	bmi	fe700730 <main+0xde700360>
 32c:	0d000003 	stceq	0, cr0, [r0, #-12]
 330:	22010078 	andcs	r0, r1, #120	; 0x78
 334:	0000f028 	andeq	pc, r0, r8, lsr #32
 338:	6f910200 	svcvs	0x00910200
 33c:	01006304 	tsteq	r0, r4, lsl #6
 340:	00f01023 	rscseq	r1, r0, r3, lsr #32
 344:	91020000 	mrsls	r0, (UNDEF: 2)
 348:	fb100077 	blx	40052e <startup-0x1fbffad2>
 34c:	01000001 	tsteq	r0, r1
 350:	00000607 	andeq	r0, r0, r7, lsl #12
 354:	000c2000 	andeq	r2, ip, r0
 358:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	13491927 	movtne	r1, #39207	; 0x9927
  24:	06120111 			; <UNDEFINED> instruction: 0x06120111
  28:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  2c:	00130119 	andseq	r0, r3, r9, lsl r1
  30:	00050300 	andeq	r0, r5, r0, lsl #6
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	34040000 	strcc	r0, [r4], #-0
  44:	3a080300 	bcc	200c4c <startup-0x1fdff3b4>
  48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  50:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  58:	0b3b0b3a 	bleq	ec2d48 <startup-0x1f13d2b8>
  5c:	13490b39 	movtne	r0, #39737	; 0x9b39
  60:	00001802 	andeq	r1, r0, r2, lsl #16
  64:	0b002406 	bleq	9084 <startup-0x1fff6f7c>
  68:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  6c:	07000008 	streq	r0, [r0, -r8]
  70:	0b0b000f 	bleq	2c00b4 <startup-0x1fd3ff4c>
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	0b002408 	bleq	90a0 <startup-0x1fff6f60>
  7c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  80:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  84:	13490101 	movtne	r0, #37121	; 0x9101
  88:	00001301 	andeq	r1, r0, r1, lsl #6
  8c:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  90:	000b2f13 	andeq	r2, fp, r3, lsl pc
  94:	002e0b00 	eoreq	r0, lr, r0, lsl #22
  98:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	01110b39 	tsteq	r1, r9, lsr fp
  a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a8:	00194297 	mulseq	r9, r7, r2
  ac:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
  b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  b4:	0b3b0b3a 	bleq	ec2da4 <startup-0x1f13d25c>
  b8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  c4:	00130119 	andseq	r0, r3, r9, lsl r1
  c8:	00050d00 	andeq	r0, r5, r0, lsl #26
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	0b390b3b 	bleq	e42dc4 <startup-0x1f1bd23c>
  d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  d8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  dc:	03193f00 	tsteq	r9, #0, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  ec:	96184006 	ldrls	r4, [r8], -r6
  f0:	00001942 	andeq	r1, r0, r2, asr #18
  f4:	11010b0f 	tstne	r1, pc, lsl #22
  f8:	00061201 	andeq	r1, r6, r1, lsl #4
  fc:	002e1000 	eoreq	r1, lr, r0
 100:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 10c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 110:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 114:	11000019 	tstne	r0, r9, lsl r0
 118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	0b390b3b 	bleq	e42e14 <startup-0x1f1bd1ec>
 124:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 128:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
 12c:	13000000 	movwne	r0, #0
 130:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	0b390b3b 	bleq	e42e2c <startup-0x1f1bd1d4>
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 144:	00130119 	andseq	r0, r3, r9, lsl r1
 148:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 14c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 150:	0b3b0b3a 	bleq	ec2e40 <startup-0x1f13d1c0>
 154:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 158:	06120111 			; <UNDEFINED> instruction: 0x06120111
 15c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 160:	00130119 	andseq	r0, r3, r9, lsl r1
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000044c 	andeq	r0, r0, ip, asr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000045c 	andcs	r0, r0, ip, asr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000030f 	andeq	r0, r0, pc, lsl #6
   4:	00a00003 	adceq	r0, r0, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	6b532f3a 	blvs	14cbd0c <startup-0x1eb342f4>
  20:	2f616c6f 	svccs	0x00616c6f
  24:	6b73614d 	blvs	1cd8560 <startup-0x1e327aa0>
  28:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
  2c:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
  30:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
  34:	6f725020 	svcvs	0x00725020
  38:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  3c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
  40:	4d2f676e 	stcmi	7, cr6, [pc, #-440]!	; fffffe90 <main+0xdffffac0>
  44:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  48:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  4c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  50:	20646172 	rsbcs	r6, r4, r2, ror r1
  54:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  58:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  5c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  60:	614d2f67 	cmpvs	sp, r7, ror #30
  64:	6e696b73 	vmovvs.8	d9[7], r6
  68:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  6c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  70:	50206461 	eorpl	r6, r0, r1, ror #8
  74:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  78:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  7c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  80:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  84:	2d322d62 	ldccs	13, cr2, [r2, #-392]!	; 0xfffffe78
  88:	74756c73 	ldrbtvc	r6, [r5], #-3187	; 0xfffff38d
  8c:	746c6967 	strbtvc	r6, [ip], #-2407	; 0xfffff699
  90:	4c2f6769 	stcmi	7, cr6, [pc], #-420	; fffffef4 <main+0xdffffb24>
  94:	32626261 	rsbcc	r6, r2, #268435462	; 0x10000006
  98:	0000332d 	andeq	r3, r0, sp, lsr #6
  9c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  a0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  a4:	00010063 	andeq	r0, r1, r3, rrx
  a8:	01050000 	mrseq	r0, (UNDEF: 5)
  ac:	00020500 	andeq	r0, r2, r0, lsl #10
  b0:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
  b4:	03025e13 	movweq	r5, #11795	; 0x2e13
  b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  bc:	0205002b 	andeq	r0, r5, #43	; 0x2b
  c0:	20000010 	andcs	r0, r0, r0, lsl r0
  c4:	05012103 	streq	r2, [r1, #-259]	; 0xfffffefd
  c8:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
  cc:	02054b20 	andeq	r4, r5, #32, 22	; 0x8000
  d0:	200e05ad 	andcs	r0, lr, sp, lsr #11
  d4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
  d8:	0605682d 	streq	r6, [r5], -sp, lsr #16
  dc:	20040568 	andcs	r0, r4, r8, ror #10
  e0:	054b1505 	strbeq	r1, [fp, #-1285]	; 0xfffffafb
  e4:	04059e0f 	streq	r9, [r5], #-3599	; 0xfffff1f1
  e8:	2f02053c 	svccs	0x0002053c
  ec:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
  f0:	32053d01 	andcc	r3, r5, #1, 26	; 0x40
  f4:	68020569 	stmdavs	r2, {r0, r3, r5, r6, r8, sl}
  f8:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
  fc:	2f3d0205 	svccs	0x003d0205
 100:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 104:	0205692e 	andeq	r6, r5, #753664	; 0xb8000
 108:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 10c:	1e055901 	vmlane.f16	s10, s10, s2	; <UNPREDICTABLE>
 110:	4b02054d 	blmi	8164c <startup-0x1ff7e9b4>
 114:	01053d3d 	tsteq	r5, sp, lsr sp
 118:	4d2c0559 	cfstr32mi	mvfx0, [ip, #-356]!	; 0xfffffe9c
 11c:	3d3e0205 	lfmcc	f0, 4, [lr, #-20]!	; 0xffffffec
 120:	2f06052f 	svccs	0x0006052f
 124:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 128:	09053d02 	stmdbeq	r5, {r1, r8, sl, fp, ip, sp}
 12c:	2f01053d 	svccs	0x0001053d
 130:	05772805 	ldrbeq	r2, [r7, #-2053]!	; 0xfffff7fb
 134:	0d053d02 	stceq	13, cr3, [r5, #-8]
 138:	2f020520 	svccs	0x00020520
 13c:	3d15053d 	cfldr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 140:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 144:	0905200d 	stmdbeq	r5, {r0, r2, r3, sp}
 148:	2f01052f 	svccs	0x0001052f
 14c:	05a12605 	streq	r2, [r1, #1541]!	; 0x605
 150:	0d053d02 	stceq	13, cr3, [r5, #-8]
 154:	2f020520 	svccs	0x00020520
 158:	3d15053d 	cfldr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 15c:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 160:	0905200d 	stmdbeq	r5, {r0, r2, r3, sp}
 164:	2f01052f 	svccs	0x0001052f
 168:	05a11905 	streq	r1, [r1, #2309]!	; 0x905
 16c:	24052f02 	strcs	r2, [r5], #-3842	; 0xfffff0fe
 170:	2f020520 	svccs	0x00020520
 174:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
 178:	24052f02 	strcs	r2, [r5], #-3842	; 0xfffff0fe
 17c:	2f020520 	svccs	0x00020520
 180:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
 184:	02052f07 	andeq	r2, r5, #7, 30
 188:	20240521 	eorcs	r0, r4, r1, lsr #10
 18c:	052f0105 	streq	r0, [pc, #-261]!	; 8f <startup-0x1fffff71>
 190:	0a05a122 	beq	168620 <startup-0x1fe979e0>
 194:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 198:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 19c:	04052e03 	streq	r2, [r5], #-3587	; 0xfffff1fd
 1a0:	03040200 	movweq	r0, #16896	; 0x4200
 1a4:	001a0521 	andseq	r0, sl, r1, lsr #10
 1a8:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 1ac:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 1b0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1b4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 1b8:	13053b02 	movwne	r3, #23298	; 0x5b02
 1bc:	01040200 	mrseq	r0, R12_usr
 1c0:	0002053c 	andeq	r0, r2, ip, lsr r5
 1c4:	20010402 	andcs	r0, r1, r2, lsl #8
 1c8:	05410105 	strbeq	r0, [r1, #-261]	; 0xfffffefb
 1cc:	07055b22 	streq	r5, [r5, -r2, lsr #22]
 1d0:	210a054c 	tstcs	sl, ip, asr #10
 1d4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 1d8:	04020004 	streq	r0, [r2], #-4
 1dc:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
 1e0:	002f0304 	eoreq	r0, pc, r4, lsl #6
 1e4:	2f030402 	svccs	0x00030402
 1e8:	03040200 	movweq	r0, #16896	; 0x4200
 1ec:	001a052f 	andseq	r0, sl, pc, lsr #10
 1f0:	2a030402 	bcs	c1200 <startup-0x1ff3ee00>
 1f4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 1f8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1fc:	0705570b 	streq	r5, [r5, -fp, lsl #14]
 200:	3601053c 			; <UNDEFINED> instruction: 0x3601053c
 204:	055b1805 	ldrbeq	r1, [fp, #-2053]	; 0xfffff7fb
 208:	0a053007 	beq	14c22c <startup-0x1feb3dd4>
 20c:	01040200 	mrseq	r0, R12_usr
 210:	001e0520 	andseq	r0, lr, r0, lsr #10
 214:	3c010402 	cfstrscc	mvf0, [r1], {2}
 218:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 21c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 220:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 224:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 228:	0402000a 	streq	r0, [r2], #-10
 22c:	1e052001 	cdpne	0, 0, cr2, cr5, cr1, {0}
 230:	01040200 	mrseq	r0, R12_usr
 234:	0007053c 	andeq	r0, r7, ip, lsr r5
 238:	3c010402 	cfstrscc	mvf0, [r1], {2}
 23c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 230 <startup-0x1ffffdd0>
 240:	3e07053d 	mcrcc	5, 0, r0, cr7, cr13, {1}
 244:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 248:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 24c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 250:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 254:	01040200 	mrseq	r0, R12_usr
 258:	2f02053c 	svccs	0x0002053c
 25c:	07053d3d 	smladxeq	r5, sp, sp, r3
 260:	000a053e 	andeq	r0, sl, lr, lsr r5
 264:	20010402 	andcs	r0, r1, r2, lsl #8
 268:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 26c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 270:	04020007 	streq	r0, [r2], #-7
 274:	02053c01 	andeq	r3, r5, #256	; 0x100
 278:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 27c:	22053d01 	andcs	r3, r5, #1, 26	; 0x40
 280:	5906053f 	stmdbpl	r6, {r0, r1, r2, r3, r4, r5, r8, sl}
 284:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 288:	18053d0b 	stmdane	r5, {r0, r1, r3, r8, sl, fp, ip, sp}
 28c:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 290:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 294:	054d2905 	strbeq	r2, [sp, #-2309]	; 0xfffff6fb
 298:	0b056708 	bleq	159ec0 <startup-0x1fea6140>
 29c:	01040200 	mrseq	r0, R12_usr
 2a0:	001f0520 	andseq	r0, pc, r0, lsr #10
 2a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2a8:	02000805 	andeq	r0, r0, #327680	; 0x50000
 2ac:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2b0:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 2b4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 2b8:	02054d10 	andeq	r4, r5, #16, 26	; 0x400
 2bc:	20220530 	eorcs	r0, r2, r0, lsr r5
 2c0:	052f0205 	streq	r0, [pc, #-517]!	; c3 <startup-0x1fffff3d>
 2c4:	0205200f 	andeq	r2, r5, #15
 2c8:	200f052f 	andcs	r0, pc, pc, lsr #10
 2cc:	052f0205 	streq	r0, [pc, #-517]!	; cf <startup-0x1fffff31>
 2d0:	0105200f 	tsteq	r5, pc
 2d4:	d920052f 	stmdble	r0!, {r0, r1, r2, r3, r5, r8, sl}
 2d8:	755a0705 	ldrbvc	r0, [sl, #-1797]	; 0xfffff8fb
 2dc:	2f760205 	svccs	0x00760205
 2e0:	4b04052f 	blmi	1017a4 <startup-0x1fefe85c>
 2e4:	052f0705 	streq	r0, [pc, #-1797]!	; fffffbe7 <main+0xdffff817>
 2e8:	03052117 	movweq	r2, #20759	; 0x5117
 2ec:	4909053c 	stmdbmi	r9, {r2, r3, r4, r5, r8, sl}
 2f0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2f4:	04053002 	streq	r3, [r5], #-2
 2f8:	3d07054b 	cfstr32cc	mvfx0, [r7, #-300]	; 0xfffffed4
 2fc:	05211705 	streq	r1, [r1, #-1797]!	; 0xfffff8fb
 300:	09053c03 	stmdbeq	r5, {r0, r1, sl, fp, ip, sp}
 304:	2e070549 	cfsh32cs	mvfx0, mvfx7, #41
 308:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 30c:	09022101 	stmdbeq	r2, {r0, r8, sp}
 310:	Address 0x00000310 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  24:	73610074 	cmnvc	r1, #116	; 0x74
  28:	5f696963 	svcpl	0x00696963
  2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  38:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
  3c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  40:	6b696d5f 	blvs	1a5b5c4 <startup-0x1e5a4a3c>
  44:	61006f72 	tstvs	r0, r2, ror pc
  48:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  4c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  50:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  54:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  58:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  5c:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
  60:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  64:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
  68:	20312e32 	eorscs	r2, r1, r2, lsr lr
  6c:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  70:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
  74:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  78:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  7c:	5b202965 	blpl	80a618 <startup-0x1f7f59e8>
  80:	2f4d5241 	svccs	0x004d5241
  84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  88:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
  8c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  90:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  94:	6f697369 	svcvs	0x00697369
  98:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
  9c:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
  a0:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  a4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  a8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  ac:	616f6c66 	cmnvs	pc, r6, ror #24
  b0:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  b4:	6f733d69 	svcvs	0x00733d69
  b8:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  bc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  c0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  c4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  c8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  cc:	304f2d20 	subcc	r2, pc, r0, lsr #26
  d0:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  d4:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  d8:	73610039 	cmnvc	r1, #57	; 0x39
  dc:	5f696963 	svcpl	0x00696963
  e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  e4:	6174735f 	cmnvs	r4, pc, asr r3
  e8:	00737574 	rsbseq	r7, r3, r4, ror r5
  ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  f0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  f4:	5f657469 	svcpl	0x00657469
  f8:	61746164 	cmnvs	r4, r4, ror #2
  fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 100:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 104:	736e3035 	cmnvc	lr, #53	; 0x35
 108:	63736100 	cmnvs	r3, #0, 2
 10c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 110:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 114:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 118:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 11c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 120:	63736100 	cmnvs	r3, #0, 2
 124:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 128:	5f646165 	svcpl	0x00646165
 12c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 130:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 134:	75007265 	strvc	r7, [r0, #-613]	; 0xfffffd9b
 138:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 13c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 140:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 144:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 148:	3a5a006e 	bcc	1680308 <startup-0x1e97fcf8>
 14c:	6f6b532f 	svcvs	0x006b532f
 150:	4d2f616c 	stfmis	f6, [pc, #-432]!	; ffffffa8 <main+0xdffffbd8>
 154:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 158:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 15c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 160:	20646172 	rsbcs	r6, r4, r2, ror r1
 164:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 168:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 16c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 170:	614d2f67 	cmpvs	sp, r7, ror #30
 174:	6e696b73 	vmovvs.8	d9[7], r6
 178:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 17c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 180:	50206461 	eorpl	r6, r0, r1, ror #8
 184:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 188:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 18c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 190:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
 194:	6f6e696b 	svcvs	0x006e696b
 198:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 19c:	61726574 	cmnvs	r2, r4, ror r5
 1a0:	72502064 	subsvc	r2, r0, #100	; 0x64
 1a4:	6172676f 	cmnvs	r2, pc, ror #14
 1a8:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 1ac:	2f676e69 	svccs	0x00676e69
 1b0:	6262614c 	rsbvs	r6, r2, #76, 2
 1b4:	732d322d 			; <UNDEFINED> instruction: 0x732d322d
 1b8:	6774756c 	ldrbvs	r7, [r4, -ip, ror #10]!
 1bc:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 1c0:	614c2f67 	cmpvs	ip, r7, ror #30
 1c4:	2d326262 	lfmcs	f6, 4, [r2, #-392]!	; 0xfffffe78
 1c8:	74732f33 	ldrbtvc	r2, [r3], #-3891	; 0xfffff0cd
 1cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1d0:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1d8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 1dc:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1e4 <startup-0x1ffffe1c>
 1e0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1e4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1e8:	72610065 	rsbvc	r0, r1, #101	; 0x65
 1ec:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 1f0:	31747365 	cmncc	r4, r5, ror #6
 1f4:	73657400 	cmnvc	r5, #0, 8
 1f8:	73003274 	movwvc	r3, #628	; 0x274
 1fc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 200:	61007075 	tstvs	r0, r5, ror r0
 204:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 208:	6165725f 	cmnvs	r5, pc, asr r2
 20c:	61645f64 	cmnvs	r4, r4, ror #30
 210:	61006174 	tstvs	r0, r4, ror r1
 214:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 218:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 21c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 220:	00726168 	rsbseq	r6, r2, r8, ror #2
 224:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 228:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 22c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 230:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 234:	5a007465 	bpl	1d3d0 <startup-0x1ffe2c30>
 238:	6b535c3a 	blvs	14d7328 <startup-0x1eb28cd8>
 23c:	5c616c6f 	stclpl	12, cr6, [r1], #-444	; 0xfffffe44
 240:	6b73614d 	blvs	1cd877c <startup-0x1e327884>
 244:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 248:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 24c:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 250:	6f725020 	svcvs	0x00725020
 254:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 258:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 25c:	4d5c676e 	ldclmi	7, cr6, [ip, #-440]	; 0xfffffe48
 260:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 264:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 268:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 26c:	20646172 	rsbcs	r6, r4, r2, ror r1
 270:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 274:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 278:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 27c:	614d5c67 	cmpvs	sp, r7, ror #24
 280:	6e696b73 	vmovvs.8	d9[7], r6
 284:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 288:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 28c:	50206461 	eorpl	r6, r0, r1, ror #8
 290:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 294:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 298:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 29c:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 2a0:	2d322d62 	ldccs	13, cr2, [r2, #-392]!	; 0xfffffe78
 2a4:	74756c73 	ldrbtvc	r6, [r5], #-3187	; 0xfffff38d
 2a8:	746c6967 	strbtvc	r6, [ip], #-2407	; 0xfffff699
 2ac:	4c5c6769 	mrrcmi	7, 6, r6, ip, cr9
 2b0:	32626261 	rsbcc	r6, r2, #268435462	; 0x10000006
 2b4:	6100332d 	tstvs	r0, sp, lsr #6
 2b8:	00766772 	rsbseq	r6, r6, r2, ror r7
 2bc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2c0:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 2c4:	Address 0x000002c4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000040 	andeq	r0, r0, r0, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000050 	andcs	r0, r0, r0, asr r0
  4c:	00000048 	andeq	r0, r0, r8, asr #32
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  5c:	00000007 	andeq	r0, r0, r7
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000098 	mulcs	r0, r8, r0
  6c:	00000030 	andeq	r0, r0, r0, lsr r0
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  7c:	00000007 	andeq	r0, r0, r7
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000c8 	andcs	r0, r0, r8, asr #1
  8c:	0000002a 	andeq	r0, r0, sl, lsr #32
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200000f2 	strdcs	r0, [r0], -r2
  ac:	00000026 	andeq	r0, r0, r6, lsr #32
  b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b4:	41018e02 	tstmi	r1, r2, lsl #28
  b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  bc:	00000007 	andeq	r0, r0, r7
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	20000118 	andcs	r0, r0, r8, lsl r1
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d4:	41018e02 	tstmi	r1, r2, lsl #28
  d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  dc:	00000007 	andeq	r0, r0, r7
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	2000014c 	andcs	r0, r0, ip, asr #2
  ec:	00000040 	andeq	r0, r0, r0, asr #32
  f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  f4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  f8:	180e4101 	stmdane	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	2000018c 	andcs	r0, r0, ip, lsl #3
 10c:	00000040 	andeq	r0, r0, r0, asr #32
 110:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 114:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 118:	180e4101 	stmdane	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	00000018 	andeq	r0, r0, r8, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	200001cc 	andcs	r0, r0, ip, asr #3
 12c:	00000038 	andeq	r0, r0, r8, lsr r0
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0000070d 	andeq	r0, r0, sp, lsl #14
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000204 	andcs	r0, r0, r4, lsl #4
 148:	0000003c 	andeq	r0, r0, ip, lsr r0
 14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 150:	41018e02 	tstmi	r1, r2, lsl #28
 154:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 158:	00000007 	andeq	r0, r0, r7
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	20000240 	andcs	r0, r0, r0, asr #4
 168:	00000044 	andeq	r0, r0, r4, asr #32
 16c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 170:	41018e02 	tstmi	r1, r2, lsl #28
 174:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 178:	00000007 	andeq	r0, r0, r7
 17c:	00000018 	andeq	r0, r0, r8, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	20000284 	andcs	r0, r0, r4, lsl #5
 188:	0000009a 	muleq	r0, sl, r0
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0000070d 	andeq	r0, r0, sp, lsl #14
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	2000031e 	andcs	r0, r0, lr, lsl r3
 1a4:	0000003e 	andeq	r0, r0, lr, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	2000035c 	andcs	r0, r0, ip, asr r3
 1c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000398 	mulcs	r0, r8, r3
 1e4:	00000038 	andeq	r0, r0, r8, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 200:	0000008c 	andeq	r0, r0, ip, lsl #1
 204:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 208:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 20c:	300e4101 	andcc	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
